readme--just for test
add more staff on browser

solr query for geo
roup=com.mmah.vetportal2.siebelData.VetClinic, objectClass=class com.mmah.vetportal2.siebelData.VetClinic, predicate=(address/location equalsany com.psddev.dari.db.Region@3b51ffcb and accountStatus notequalsall [ 'Deleted', 'Suspended' ] and address/country equalsany [ 'USA', '' ] and accountTier notequalsall [ 'Both', 'Consumer' ] and _any matchesany '*'), sorters=[closest { 'address/location', {x=18.4683, y=-66.1061} }], database=null, isResolveToReferenceOnly=false, timeout=null, options=null}


{group=com.mmah.vetportal2.siebelData.VetClinic, objectClass=class com.mmah.vetportal2.siebelData.VetClinic, predicate=(address/location equalsany com.psddev.dari.db.Region@55604955 and accountStatus notequalsall [ 'Deleted', 'Suspended' ] and address/country equalsany [ 'USA', '' ] and accountTier equalsany [ 'Both', 'Consumer' ] and _any matchesany '*'), sorters=[closest { 'address/location', {x=18.4683, y=-66.1061} }], database=null, isResolveToReferenceOnly=false, timeout=null, options=null}


http://localhost:8080/solr/select?q=*:*&fq=_g_com.mmah.vetportal2.siebelData.VetClinic%2Faddress%2Flocation:[45,-94%20TO%2046,-93]
http://localhost:8080/solr/select?q=*:*&fq=_g_com.mmah.vetportal2.siebelData.VetClinic%2Faddress%2Flocation:[45.395534999,-122.9178%20TO%2045.496841,-122.8467269269]

http://localhost:8080/solr/select?q=*:*&fq=_g_com.mmah.vetportal2.siebelData.VetClinic%2Faddress%2Flocation:[45.3955349996727%2C-122.91780107308296%20TO%2045.496841,-122.8467269269]
is same as
http://localhost:8080/solr/select?q=_g_com.mmah.vetportal2.siebelData.VetClinic%2Faddress%2Flocation:[45.3955349996727%2C-122.91780107308296%20TO%2045.496841,-122.8467269269]&q={!func}geodist()

&q=*:*&sfield=store&pt=45.15,-93.85&fl=name,store,geodist()
{!func}geodist()&sfield=store&pt=45.15,-93.85&sort=score asc

works to return distance
http://localhost:8080/solr/select?fq={!bbox}&sfield=_g_com.mmah.vetportal2.siebelData.VetClinic%2Faddress%2Flocation&pt=45.446188%2C-122.882264&d=5.0&sort=score%20asc&&q={!func}geodist%28%29&fl=*,score&rows=71
works using geodist()--need pt param
http://localhost:8080/solr/select?fq=%28_g_com.mmah.vetportal2.siebelData.VetClinic%2Faddress%2Flocation%3A%28[45.3955349996727%2C-122.91780107308296+TO+45.4968410003273%2C-122.84672692691706]%29%29&sfield=_g_com.mmah.vetportal2.siebelData.VetClinic%2Faddress%2Flocation&pt=45.446188%2C-122.882264&sort=score%20asc&&q={!func}geodist%28%29&fl=*,score&rows=71

for solr query inside debug use 
http://localhost:8080/solr/select?q=*:*&fq=_g_com.mmah.vetportal2.siebelData.VetClinic%2Faddress%2Flocation:[45.395534999,-122.9178%20TO%2045.496841,-122.8467]

works for dari 2.3 qery
    public static Object main() throws Throwable {
        Query query = Query.from(Article.class);
        String last = "Tue Dec 03 01:40:37 EST 2013";
        Date d = new Date(last);
        Date cur = new Date();
        long tenBefore =cur.getTime() - 10*24*60*60*1000;
        Date tenBeforeDate = new Date(tenBefore);
        //query = query.and(com.psddev.cms.db.Directory.Static.hasPathPredicate()).and("cms.content.updateDate > ?", d);
        query = query.and(com.psddev.cms.db.Directory.Static.hasPathPredicate()).and("cms.content.updateDate > ?", tenBeforeDate);
        return query.select(0,11);    
    }  


works for vetstreet 1.9
        Query<SimpleArticle> query = Query.from(SimpleArticle.class);
        String last = "Tue Dec 03 01:40:37 EST 2013";
        Date d = new Date(last);
        Date cur = new Date();
        long tenBefore =cur.getTime() - 10*24*60*60*1000;
        Date tenBeforeDate = new Date(tenBefore);
        //query = query.and(com.psddev.cms.db.Directory.Static.hasPathPredicate()).and("cms.content.updateDate > ?", d);
        query = query.and("headline = ?","test feed").and("cms.content.updateDate > ?", tenBeforeDate);
        SimpleArticle a = query.first();
        ArticleSection l = a.getArticleSections().get(0);
        String tt = l.getSectionText().toString();
        //return query.select(0,11);  
        return tt;
        
        
        
use geo search for zip 97007
import com.mmah.vetportal2.model.*;
import com.mmah.vetportal2.model.*;
import com.mmah.vetportal2.siebelData.*;
import com.mmah.vetportal2.web.*;
import com.psddev.dari.db.*;
import com.psddev.dari.util.*;
import java.util.*;

public class Code {
    public static Object main() throws Throwable {
        String rad = "3.2";
		double radius = Double.parseDouble(rad);
        double lat = 45.446188;
        double lon = -122.882264;

		double degree = Region.milesToDegrees(radius);
		//Region for search
		Region region = Region.sphericalCircle(lat, lon, degree);
			
		Query<VetClinic>  q = Query.from(VetClinic.class).
		where("address/location = ?", region).
				and("* matches *").
				sortClosest("address/location", new com.psddev.dari.db.Location(lat, lon));
        return q.select(0,11);
    }
}


use missing to check path---works in 1.9
import com.mmah.vetportal2.model.*;

public class Code {
    public static Object main() throws Throwable {
        Query<BlogArticle> blogArticleWithTagsQuery = Query.from(BlogArticle.class).where(
       "tags/speciesTags != missing OR tags/conditionTags != missing OR tags/siteContentTags != missing")
                        .and("cms.directory.paths != missing");
        String name = "Dr. Tony Johnson";//"Dr Patty Khuly";
		Query<BlogArticle> blogQuery0 = Query.from(BlogArticle.class)
		    	.where(" authors != ?", "missing");
		Query<BlogArticle> blogQuery1 = Query.from(BlogArticle.class)
		    	.where(" authors = ?", Query.from(Author.class).where("fullName = ?", name));
		Query<BlogArticle> blogQuery2 = Query.from(BlogArticle.class) 
        .where("authors != ? && authors = ?",(Object)"mising", 
                      Query.from(Author.class).where("fullName = ?", name));
       //return blogQuery1.select(0,11); //blogArticleWithTagsQuery.select(0,11);
       return blogArticleWithTagsQuery.select(0,11);
    }
}
import com.mmah.vetportal2.test.*;
import com.mmah.vetportal2.web.*;
import com.mmah.vetportal2.model.*;
import com.psddev.dari.db.*;
import com.psddev.dari.util.*;
import java.util.*;

public class Code {
    public static Object main() throws Throwable {
        String searchStr = "SLENTROL";
        List<String> searchTerms = new ArrayList<String>(Arrays.asList(searchStr.trim().split(" ")));
        Query query = Query.from(SponsoredArticle.class);
        query.or("* ~= ?", searchTerms);
        //query.and("* ~= ?", searchTerms);


        //query = query.and("cms.directory.paths != ?", (String)null);
        query = query.and("cms.directory.paths != missing");    
        return query.select(0,11);
    }
}

use solr 3.6.0 to do geo search
import com.mmah.vetportal2.test.*;
import com.mmah.vetportal2.web.*;
import com.mmah.vetportal2.siebelData.*;
import com.psddev.dari.db.*;
import com.psddev.dari.util.*;
import java.util.*;

public class Code {
    public static Object main() throws Throwable {
	 String[] statusToshow = {"Active","Inactive","Prospect"};
	 String[] statusNotToshow = {"Deleted","Suspended"};
	 String[] supportCountryList = {"USA", null};
    	double lat = 41.9892;
		double lon = -72.6521;
		double degree =Region.milesToDegrees(50.0);
		//Region for search
		Region region = Region.sphericalCircle(lat, lon, degree);
		PaginatedResult<VetClinic> clinicList = null;	
		Query<VetClinic> clinicQuery = null;	

		clinicQuery = Query.from(VetClinic.class).
		where("address/location = ?", region).
		and("accountStatus != ?",Arrays.asList(statusNotToshow)).
		and("address/country = ?", Arrays.asList(supportCountryList));
        List<String> searchWords = new ArrayList<String>();
        searchWords.add("Animal");
             clinicQuery = clinicQuery.
					and("_any matchesAll ?", searchWords);
		clinicQuery = clinicQuery.
				sortAscending("displayTier").
				sortClosest("address/location", new com.psddev.dari.db.Location(lat, lon));
		clinicList = clinicQuery.select(0, 11);
       
        return clinicList;
    }
}


public class Code {
    public static Object main() throws Throwable {
        Query q = Query.from(Record.class).where("_type = 00000136-ef2b-dd0c-a776-ef2f1fa40023");
        return q.select(0,41).getItems();
    }

    public static Object main() throws Throwable {
        Double lat = 33.0392;
        Double lon = -85.0314;
        Region region = Region.cartesianCircle(lat, lon, 50.0 / 74.0, 12);
        Query q = Query.from(Facility.class).where("geoLocation = ?", region).sortClosest("geoLocation", new com.psddev.dari.db.Location(lat, lon));
        return q.select(0,22).getItems();
    }
        public static Object main() throws Throwable {
          Double lat = 45.3045;//33.0392;
        Double lon = -93.5718;//-85.0314;
        Region region = Region.cartesianCircle(lat, lon, 20.0 / 74.0, 12);
        Query q = Query.from(Facility.class).where("geoLocation = ?", region).sortClosest("geoLocation", new com.psddev.dari.db.Location(lat, lon));
        Query q2 = Query.from(Shelter.class).where("* matches * AND facility/geoLocation = ?", region).sortClosest("facility/geoLocation", new com.psddev.dari.db.Location(lat, lon));
        Query q3 = Query.from(Pet.class).where("* matches * AND shelter/facility/geoLocation = ?", region).sortClosest("shelter/facility/geoLocation", new com.psddev.dari.db.Location(lat, lon));
        return q3.select(0,22).getItems();
 }
     public static Object main() throws Throwable {
        //Query q = Query.from(com.psddev.cms.db.Directory.class).where("path ^= ?", "/shelters");
        Query q = Query.from(Species.class);
        q.deleteAll();
        long cn = q.count();
        return cn;
    }
    public static Object main() throws Throwable {
        Double lat = 33.0392;
        Double lon = -85.0314;
        Region region = Region.cartesianCircle(lat, lon, 50.0 / 74.0, 12);
        //Query q = Query.from(Facility.class).where("* matches *").and("geoLocation = ?", region);//.sortClosest("geoLocation", new com.psddev.dari.db.Location(lat, lon));
        String[] usstates = {"CT","MD","ME","CA","IL","TX"};
        HashMap<String, Long> usstates2 = new HashMap<String,Long>();
        HashMap<String, Long> usstatesPet = new HashMap<String,Long>();
        Query q = Query.from(Shelter.class);
        Iterator<Shelter> iterator = q.iterable(90).iterator();
        while (iterator.hasNext()){
            Shelter ss = iterator.next();
            String usst = ss.getForeignId().substring(0,2);
            if (!usstates2.containsKey(usst)) 
                usstates2.put(usst, 1L);
            else
            usstates2.put(usst, usstates2.get(usst)+1L);
        }
       
        //Map<String,petcounter> carray2 = new HashMap<String,petcounter>();
        for (String ss: usstates2.keySet()){
            Query q1 = Query.from(Shelter.class).where("foreignId ^= ?", ss);//.sortClosest("facility/geoLocation", new com.psddev.dari.db.Location(lat, lon));
            Query q2 = Query.from(Pet.class).where("foreignShelterId ^= ?", ss);
            usstatesPet.put(ss, q2.count());
            //carray2.put(ss,q2.count());
        }
        return usstatesPet;
    }
    public static Object main() throws Throwable {
        Query<Shelter> q = Query.from(Shelter.class).where("foreignId ^= ?", "VT");
        Map<Shelter, Long> cntMap = new HashMap<Shelter, Long>();
        for (Shelter s: q.selectAll()){
            long cnt = Query.from(Pet.class).where("shelter = ?", s).count();
            if (cnt == 0)
            cntMap.put(s,cnt);
        }
        for (Shelter s: cntMap.keySet()){
            s.delete();
        }
        return cntMap;
    }
    
    SolrDatabase solr = Database.Static.getFirst(SolrDatabase.class);
solr.deleteByQuery(Query.from(Pet.class));

SqlDatabase sql = Database.Static.getFirst(SqlDatabase.class);
sql.deleteByQuery(Query.from(Pet.class));
