readme--just for test
add more staff on browser

use solr 3.6.0 to do geo search
    public static Object main() throws Throwable {
    	double lat = 41.9892;
		double lon = -72.6521;
		double degree =Region.milesToDegrees(50.0);
        List<String> searchWords = new ArrayList<String>();
        searchWords.add("Hospital");
        searchWords.add("East");
		//Region for search
		Region region = Region.sphericalCircle(lat, lon, degree);
		PaginatedResult<VetClinic> clinicList = null;	
		Query<VetClinic> clinicQuery = null;	
		
		//use search obj, but no geo location in search
		//may use ObjectType.getInstance(c) to get type, or just use class
		clinicQuery = Query.from(VetClinic.class).
		where("address/location = ?", region).and("_any matchesAll ?", searchWords);;
    	//where("address/location = ?", region).
          //  and("name matches ?", searchWords);
        //    and("accountProfile matches ?", searchWords);
		
        clinicList = clinicQuery.select(0, 11);
        return clinicList;
}

public class Code {
    public static Object main() throws Throwable {
        Query q = Query.from(Record.class).where("_type = 00000136-ef2b-dd0c-a776-ef2f1fa40023");
        return q.select(0,41).getItems();
    }

    public static Object main() throws Throwable {
        Double lat = 33.0392;
        Double lon = -85.0314;
        Region region = Region.cartesianCircle(lat, lon, 50.0 / 74.0, 12);
        Query q = Query.from(Facility.class).where("geoLocation = ?", region).sortClosest("geoLocation", new com.psddev.dari.db.Location(lat, lon));
        return q.select(0,22).getItems();
    }
        public static Object main() throws Throwable {
          Double lat = 45.3045;//33.0392;
        Double lon = -93.5718;//-85.0314;
        Region region = Region.cartesianCircle(lat, lon, 20.0 / 74.0, 12);
        Query q = Query.from(Facility.class).where("geoLocation = ?", region).sortClosest("geoLocation", new com.psddev.dari.db.Location(lat, lon));
        Query q2 = Query.from(Shelter.class).where("* matches * AND facility/geoLocation = ?", region).sortClosest("facility/geoLocation", new com.psddev.dari.db.Location(lat, lon));
        Query q3 = Query.from(Pet.class).where("* matches * AND shelter/facility/geoLocation = ?", region).sortClosest("shelter/facility/geoLocation", new com.psddev.dari.db.Location(lat, lon));
        return q3.select(0,22).getItems();
 }
     public static Object main() throws Throwable {
        //Query q = Query.from(com.psddev.cms.db.Directory.class).where("path ^= ?", "/shelters");
        Query q = Query.from(Species.class);
        q.deleteAll();
        long cn = q.count();
        return cn;
    }
    public static Object main() throws Throwable {
        Double lat = 33.0392;
        Double lon = -85.0314;
        Region region = Region.cartesianCircle(lat, lon, 50.0 / 74.0, 12);
        //Query q = Query.from(Facility.class).where("* matches *").and("geoLocation = ?", region);//.sortClosest("geoLocation", new com.psddev.dari.db.Location(lat, lon));
        String[] usstates = {"CT","MD","ME","CA","IL","TX"};
        HashMap<String, Long> usstates2 = new HashMap<String,Long>();
        HashMap<String, Long> usstatesPet = new HashMap<String,Long>();
        Query q = Query.from(Shelter.class);
        Iterator<Shelter> iterator = q.iterable(90).iterator();
        while (iterator.hasNext()){
            Shelter ss = iterator.next();
            String usst = ss.getForeignId().substring(0,2);
            if (!usstates2.containsKey(usst)) 
                usstates2.put(usst, 1L);
            else
            usstates2.put(usst, usstates2.get(usst)+1L);
        }
       
        //Map<String,petcounter> carray2 = new HashMap<String,petcounter>();
        for (String ss: usstates2.keySet()){
            Query q1 = Query.from(Shelter.class).where("foreignId ^= ?", ss);//.sortClosest("facility/geoLocation", new com.psddev.dari.db.Location(lat, lon));
            Query q2 = Query.from(Pet.class).where("foreignShelterId ^= ?", ss);
            usstatesPet.put(ss, q2.count());
            //carray2.put(ss,q2.count());
        }
        return usstatesPet;
    }
    public static Object main() throws Throwable {
        Query<Shelter> q = Query.from(Shelter.class).where("foreignId ^= ?", "VT");
        Map<Shelter, Long> cntMap = new HashMap<Shelter, Long>();
        for (Shelter s: q.selectAll()){
            long cnt = Query.from(Pet.class).where("shelter = ?", s).count();
            if (cnt == 0)
            cntMap.put(s,cnt);
        }
        for (Shelter s: cntMap.keySet()){
            s.delete();
        }
        return cntMap;
    }
    
    SolrDatabase solr = Database.Static.getFirst(SolrDatabase.class);
solr.deleteByQuery(Query.from(Pet.class));

SqlDatabase sql = Database.Static.getFirst(SqlDatabase.class);
sql.deleteByQuery(Query.from(Pet.class));